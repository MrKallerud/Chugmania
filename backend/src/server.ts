import { eq } from 'drizzle-orm'
import express from 'express'
import { Server } from 'socket.io'
import ViteExpress from 'vite-express'
import {
  WS_CONNECT_NAME,
  WS_DISCONNECT_NAME,
} from '../../common/utils/constants'
import db from '../database/database'
import { sessions } from '../database/schema'
import ConnectionManager from './managers/connection.manager'

const PORT = process.env.PORT ? Number.parseInt(process.env.PORT) : 6996
const app = express()

app.get('/api/sessions/:id/calendar.ics', async (req, res) => {
  const sessionId = req.params.id
  if (!sessionId) {
    res.status(400).send('Session id is required')
    return
  }

  const session = await db.query.sessions.findFirst({
    where: eq(sessions.id, sessionId),
  })

  if (!session || session.deletedAt) {
    res.status(404).send('Session not found')
    return
  }

  const calendar = createSessionCalendar(session, req.protocol, req.get('host'))
  res
    .type('text/calendar; charset=utf-8')
    .setHeader(
      'Content-Disposition',
      `inline; filename="session-${session.id}.ics"`
    )
    .setHeader('Cache-Control', 'no-store')
    .send(calendar)
})

const server = ViteExpress.listen(app, PORT)
const io = new Server(server, {
  cors: {
    origin: [process.env.ORIGIN ?? 'http://localhost:' + PORT],
    credentials: true,
  },
})

io.on(WS_CONNECT_NAME, s =>
  ConnectionManager.connect(s).then(() => {
    s.on(WS_DISCONNECT_NAME, () => ConnectionManager.disconnect(s))
  })
)

function escapeICSText(value: string) {
  return value
    .replace(/\\/g, '\\\\')
    .replace(/\n/g, '\\n')
    .replace(/,/g, '\\,')
    .replace(/;/g, '\\;')
}

function formatICSDate(date: Date) {
  return date
    .toISOString()
    .replace(/[-:]/g, '')
    .replace(/\.\d{3}Z$/, 'Z')
}

function createSessionCalendar(
  session: typeof sessions.$inferSelect,
  protocol: string,
  host: string | undefined
) {
  const start = new Date(session.date)
  const end = new Date(start.getTime() + 2 * 60 * 60 * 1000)
  const updatedAt = session.updatedAt ?? session.createdAt
  const sequence =
    session.updatedAt &&
    session.updatedAt.getTime() !== session.createdAt.getTime()
      ? Math.floor(session.updatedAt.getTime() / 1000)
      : 0
  const baseUrl =
    host !== undefined
      ? `${protocol}://${host}`
      : (process.env.ORIGIN ?? 'http://localhost:' + PORT)
  const url = `${baseUrl}/sessions`
  const lines = [
    'BEGIN:VCALENDAR',
    'VERSION:2.0',
    'PRODID:-//Chugmania//Sessions//EN',
    'CALSCALE:GREGORIAN',
    'METHOD:PUBLISH',
    'BEGIN:VEVENT',
    `UID:${session.id}@chugmania`,
    `DTSTAMP:${formatICSDate(updatedAt)}`,
    `DTSTART:${formatICSDate(start)}`,
    `DTEND:${formatICSDate(end)}`,
    `SEQUENCE:${sequence}`,
    `SUMMARY:${escapeICSText(session.name)}`,
    session.location
      ? `LOCATION:${escapeICSText(session.location)}`
      : undefined,
    `DESCRIPTION:${escapeICSText(
      'Automatically generated by Chugmania. Join the session in the app for more details.'
    )}`,
    `URL:${escapeICSText(url)}`,
    'END:VEVENT',
    'END:VCALENDAR',
    '',
  ].filter(Boolean)

  return lines.join('\r\n')
}
